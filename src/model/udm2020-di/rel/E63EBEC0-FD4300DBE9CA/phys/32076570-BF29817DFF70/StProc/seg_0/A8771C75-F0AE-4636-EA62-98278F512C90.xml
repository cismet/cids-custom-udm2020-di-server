<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureOraclev10g class="oracle.dbtools.crest.model.design.storage.oracle.v10g.StoredProcedureOraclev10g" name="REINDEXPURE_OBJ" directorySegmentName="seg_0" id="A8771C75-F0AE-4636-EA62-98278F512C90">
<sourceConnName>uim_di01</sourceConnName>
<sourceObjSchema>UIM_DI01</sourceObjSchema>
<sourceObjName>REINDEXPURE_OBJ</sourceObjName>
<createdBy>pd</createdBy>
<createdTime>2015-08-25 12:18:45 UTC</createdTime>
<generatorID>Benutzergeneriert</generatorID>
<ownerDesignName>udm2020-di</ownerDesignName>
<owner>792A8200-7BF0-6F56-C9E8-89F2CB089D39</owner>
<source>CREATE OR REPLACE PROCEDURE UIM_DI01.REINDEXPURE_OBJ (classid IN INTEGER, objectid IN INTEGER)&lt;br/&gt;  IS&lt;br/&gt;    TYPE pk_cur_type IS REF CURSOR;&lt;br/&gt;    TYPE id_cur_type IS REF CURSOR;&lt;br/&gt;    pk_cur pk_cur_type;&lt;br/&gt;    id_cur id_cur_type;&lt;br/&gt;    attr cs_attr%ROWTYPE;&lt;br/&gt;    pField varchar2(100);&lt;br/&gt;    fName varchar2(200);&lt;br/&gt;    attr_obj_id INTEGER;&lt;br/&gt;    class cs_class%ROWTYPE;&lt;br/&gt;    query varchar2(1000);&lt;br/&gt;    secQuery varchar2(1000);&lt;br/&gt;    attrClass cs_class%ROWTYPE;&lt;br/&gt;    backreference varchar2(200);&lt;br/&gt;BEGIN&lt;br/&gt;&lt;br/&gt;	SELECT * INTO class FROM cs_class WHERE id = classId;&lt;br/&gt;&lt;br/&gt;	FOR attr IN (SELECT * FROM cs_attr WHERE class_id = classid) LOOP	&lt;br/&gt;		IF attr.indexed = &apos;1&apos; THEN&lt;br/&gt;			IF attr.foreign_key_references_to &lt; 0 THEN&lt;br/&gt;				query := &apos;SELECT &apos; || class.primary_key_field || &apos; AS pField, cast(&apos; ||  class.primary_key_field || &apos; as varchar2(200)) AS fName FROM &apos; || class.table_name || &apos; where id = &apos; || objectid;&lt;br/&gt;			ELSE&lt;br/&gt;				query := &apos;SELECT &apos; || class.primary_key_field || &apos; AS pField, cast(&apos; ||  attr.field_name || &apos; as varchar2(200)) AS fName FROM &apos; || class.table_name || &apos; where id = &apos; || objectid;&lt;br/&gt;			END IF;&lt;br/&gt;      &lt;br/&gt;      OPEN pk_cur FOR query;&lt;br/&gt;      LOOP&lt;br/&gt;        FETCH pk_cur INTO pField, fName;&lt;br/&gt;        EXIT WHEN pk_cur%NOTFOUND;&lt;br/&gt;        &lt;br/&gt;				IF attr.foreign_key = &apos;1&apos; THEN&lt;br/&gt;					SELECT cs_class.* INTO attrClass FROM cs_class, cs_type WHERE cs_type.class_id = cs_class.id AND cs_type.id = attr.type_id;&lt;br/&gt;					IF attr.foreign_key_references_to &lt; 0 THEN&lt;br/&gt;						SELECT field_name INTO backreference FROM cs_attr WHERE class_id = abs(attr.foreign_key_references_to) AND foreign_key_references_to = attr.class_id;&lt;br/&gt;            &lt;br/&gt;						secQuery := &apos;SELECT id as id FROM &apos; || attrClass.table_name || &apos; WHERE &apos; || backreference  || &apos; =  &apos; || pField;&lt;br/&gt;            &lt;br/&gt;            OPEN id_cur FOR secQuery;&lt;br/&gt;						LOOP&lt;br/&gt;              FETCH id_cur INTO attr_obj_id;&lt;br/&gt;              EXIT WHEN id_cur%NOTFOUND;&lt;br/&gt;              &lt;br/&gt;							INSERT INTO cs_attr_object_temp (class_id, object_id, attr_class_id, attr_object_id) VALUES (class.id, pField, attrClass.id, attr_obj_id);&lt;br/&gt;						END LOOP;&lt;br/&gt;            CLOSE id_cur;&lt;br/&gt;					ELSIF attrClass.array_link = &apos;1&apos; THEN&lt;br/&gt;						secQuery := &apos;SELECT id as id FROM &apos; || attrClass.table_name || &apos; WHERE &apos; || attr.array_key  || &apos; =  &apos; || pField;&lt;br/&gt;            &lt;br/&gt;            OPEN id_cur FOR secQuery;&lt;br/&gt;						LOOP&lt;br/&gt;              FETCH id_cur INTO attr_obj_id;&lt;br/&gt;              EXIT WHEN id_cur%NOTFOUND;&lt;br/&gt;              &lt;br/&gt;							INSERT INTO cs_attr_object_temp (class_id, object_id, attr_class_id, attr_object_id) VALUES (class.id, pField, attrClass.id, attr_obj_id);&lt;br/&gt;						END LOOP;&lt;br/&gt;            CLOSE id_cur;&lt;br/&gt;					ELSE&lt;br/&gt;						secQuery := &apos;select &apos; || class.table_name || &apos;.&apos; || attr.field_name || &apos; as attr_obj_id from &apos; || class.table_name || &apos;, &apos; || attrclass.table_name || &apos; WHERE &apos; || class.table_name || &apos;.&apos; || class.primary_key_field || &apos; = &apos; || pField || &apos; AND &apos; || class.table_name || &apos;.&apos; || attr.field_name || &apos; = &apos; || attrClass.table_name || &apos;.&apos; || attrClass.primary_key_field;&lt;br/&gt;            &lt;br/&gt;            OPEN id_cur FOR secQuery;&lt;br/&gt;            FETCH id_cur INTO attr_obj_id;&lt;br/&gt;            -- never more than one row&lt;br/&gt;            IF id_cur%FOUND THEN&lt;br/&gt;              -- one row&lt;br/&gt;              insert into cs_attr_object_temp (class_id, object_id, attr_class_id, attr_object_id) VALUES (class.id, pField, attrClass.id, attr_obj_id);&lt;br/&gt;            ELSE&lt;br/&gt;              -- no rows at all&lt;br/&gt;              INSERT INTO cs_attr_object_temp (class_id, object_id, attr_class_id, attr_object_id) VALUES (class.id, pField, attrclass.id, -1);&lt;br/&gt;            END IF;&lt;br/&gt;            CLOSE id_cur;&lt;br/&gt;					END IF;&lt;br/&gt;				ELSE &lt;br/&gt;					IF fName IS NOT NULL THEN&lt;br/&gt;						INSERT INTO cs_attr_string_temp (class_id, attr_id, object_id, string_val) VALUES (classId, attr.id, pField, fName);&lt;br/&gt;					END IF;&lt;br/&gt;				END IF;&lt;br/&gt;			END LOOP;&lt;br/&gt;		END IF;&lt;br/&gt;	END LOOP;&lt;br/&gt;&lt;br/&gt;	DELETE FROM cs_attr_object WHERE class_id = class.id AND object_id = objectid;&lt;br/&gt;	DELETE FROM cs_attr_string WHERE class_id = class.id AND object_id = objectid;&lt;br/&gt;	INSERT INTO cs_attr_object ( class_id, object_id, attr_class_id, attr_object_id) (SELECT class_id, object_id, attr_class_id, attr_object_id FROM cs_attr_object_temp);&lt;br/&gt;	INSERT INTO cs_attr_string ( class_id, attr_id, object_id, string_val) (SELECT class_id, attr_id, object_id, string_val FROM cs_attr_string_temp);&lt;br/&gt;	&lt;br/&gt;END;</source>
<body>CREATE OR REPLACE PROCEDURE UIM_DI01.REINDEXPURE_OBJ (classid IN INTEGER, objectid IN INTEGER)&lt;br/&gt;  IS&lt;br/&gt;    TYPE pk_cur_type IS REF CURSOR;&lt;br/&gt;    TYPE id_cur_type IS REF CURSOR;&lt;br/&gt;    pk_cur pk_cur_type;&lt;br/&gt;    id_cur id_cur_type;&lt;br/&gt;    attr cs_attr%ROWTYPE;&lt;br/&gt;    pField varchar2(100);&lt;br/&gt;    fName varchar2(200);&lt;br/&gt;    attr_obj_id INTEGER;&lt;br/&gt;    class cs_class%ROWTYPE;&lt;br/&gt;    query varchar2(1000);&lt;br/&gt;    secQuery varchar2(1000);&lt;br/&gt;    attrClass cs_class%ROWTYPE;&lt;br/&gt;    backreference varchar2(200);&lt;br/&gt;BEGIN&lt;br/&gt;&lt;br/&gt;	SELECT * INTO class FROM cs_class WHERE id = classId;&lt;br/&gt;&lt;br/&gt;	FOR attr IN (SELECT * FROM cs_attr WHERE class_id = classid) LOOP	&lt;br/&gt;		IF attr.indexed = &apos;1&apos; THEN&lt;br/&gt;			IF attr.foreign_key_references_to &lt; 0 THEN&lt;br/&gt;				query := &apos;SELECT &apos; || class.primary_key_field || &apos; AS pField, cast(&apos; ||  class.primary_key_field || &apos; as varchar2(200)) AS fName FROM &apos; || class.table_name || &apos; where id = &apos; || objectid;&lt;br/&gt;			ELSE&lt;br/&gt;				query := &apos;SELECT &apos; || class.primary_key_field || &apos; AS pField, cast(&apos; ||  attr.field_name || &apos; as varchar2(200)) AS fName FROM &apos; || class.table_name || &apos; where id = &apos; || objectid;&lt;br/&gt;			END IF;&lt;br/&gt;      &lt;br/&gt;      OPEN pk_cur FOR query;&lt;br/&gt;      LOOP&lt;br/&gt;        FETCH pk_cur INTO pField, fName;&lt;br/&gt;        EXIT WHEN pk_cur%NOTFOUND;&lt;br/&gt;        &lt;br/&gt;				IF attr.foreign_key = &apos;1&apos; THEN&lt;br/&gt;					SELECT cs_class.* INTO attrClass FROM cs_class, cs_type WHERE cs_type.class_id = cs_class.id AND cs_type.id = attr.type_id;&lt;br/&gt;					IF attr.foreign_key_references_to &lt; 0 THEN&lt;br/&gt;						SELECT field_name INTO backreference FROM cs_attr WHERE class_id = abs(attr.foreign_key_references_to) AND foreign_key_references_to = attr.class_id;&lt;br/&gt;            &lt;br/&gt;						secQuery := &apos;SELECT id as id FROM &apos; || attrClass.table_name || &apos; WHERE &apos; || backreference  || &apos; =  &apos; || pField;&lt;br/&gt;            &lt;br/&gt;            OPEN id_cur FOR secQuery;&lt;br/&gt;						LOOP&lt;br/&gt;              FETCH id_cur INTO attr_obj_id;&lt;br/&gt;              EXIT WHEN id_cur%NOTFOUND;&lt;br/&gt;              &lt;br/&gt;							INSERT INTO cs_attr_object_temp (class_id, object_id, attr_class_id, attr_object_id) VALUES (class.id, pField, attrClass.id, attr_obj_id);&lt;br/&gt;						END LOOP;&lt;br/&gt;            CLOSE id_cur;&lt;br/&gt;					ELSIF attrClass.array_link = &apos;1&apos; THEN&lt;br/&gt;						secQuery := &apos;SELECT id as id FROM &apos; || attrClass.table_name || &apos; WHERE &apos; || attr.array_key  || &apos; =  &apos; || pField;&lt;br/&gt;            &lt;br/&gt;            OPEN id_cur FOR secQuery;&lt;br/&gt;						LOOP&lt;br/&gt;              FETCH id_cur INTO attr_obj_id;&lt;br/&gt;              EXIT WHEN id_cur%NOTFOUND;&lt;br/&gt;              &lt;br/&gt;							INSERT INTO cs_attr_object_temp (class_id, object_id, attr_class_id, attr_object_id) VALUES (class.id, pField, attrClass.id, attr_obj_id);&lt;br/&gt;						END LOOP;&lt;br/&gt;            CLOSE id_cur;&lt;br/&gt;					ELSE&lt;br/&gt;						secQuery := &apos;select &apos; || class.table_name || &apos;.&apos; || attr.field_name || &apos; as attr_obj_id from &apos; || class.table_name || &apos;, &apos; || attrclass.table_name || &apos; WHERE &apos; || class.table_name || &apos;.&apos; || class.primary_key_field || &apos; = &apos; || pField || &apos; AND &apos; || class.table_name || &apos;.&apos; || attr.field_name || &apos; = &apos; || attrClass.table_name || &apos;.&apos; || attrClass.primary_key_field;&lt;br/&gt;            &lt;br/&gt;            OPEN id_cur FOR secQuery;&lt;br/&gt;            FETCH id_cur INTO attr_obj_id;&lt;br/&gt;            -- never more than one row&lt;br/&gt;            IF id_cur%FOUND THEN&lt;br/&gt;              -- one row&lt;br/&gt;              insert into cs_attr_object_temp (class_id, object_id, attr_class_id, attr_object_id) VALUES (class.id, pField, attrClass.id, attr_obj_id);&lt;br/&gt;            ELSE&lt;br/&gt;              -- no rows at all&lt;br/&gt;              INSERT INTO cs_attr_object_temp (class_id, object_id, attr_class_id, attr_object_id) VALUES (class.id, pField, attrclass.id, -1);&lt;br/&gt;            END IF;&lt;br/&gt;            CLOSE id_cur;&lt;br/&gt;					END IF;&lt;br/&gt;				ELSE &lt;br/&gt;					IF fName IS NOT NULL THEN&lt;br/&gt;						INSERT INTO cs_attr_string_temp (class_id, attr_id, object_id, string_val) VALUES (classId, attr.id, pField, fName);&lt;br/&gt;					END IF;&lt;br/&gt;				END IF;&lt;br/&gt;			END LOOP;&lt;br/&gt;		END IF;&lt;br/&gt;	END LOOP;&lt;br/&gt;&lt;br/&gt;	DELETE FROM cs_attr_object WHERE class_id = class.id AND object_id = objectid;&lt;br/&gt;	DELETE FROM cs_attr_string WHERE class_id = class.id AND object_id = objectid;&lt;br/&gt;	INSERT INTO cs_attr_object ( class_id, object_id, attr_class_id, attr_object_id) (SELECT class_id, object_id, attr_class_id, attr_object_id FROM cs_attr_object_temp);&lt;br/&gt;	INSERT INTO cs_attr_string ( class_id, attr_id, object_id, string_val) (SELECT class_id, attr_id, object_id, string_val FROM cs_attr_string_temp);&lt;br/&gt;	&lt;br/&gt;END;</body>
</StoredProcedureOraclev10g>